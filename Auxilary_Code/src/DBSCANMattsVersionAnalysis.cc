#include <fstream>
#include <iomanip>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <vector>

#include "GetData.h"
#include "Result.h"
#include "Utility.h"

using namespace std;

int main(int args, char* argv[])
{
  /****************************************************/
  /* Declaration/Initialization of function variables */
  /****************************************************/
  GetData myData;
  ifstream InFile;
  ofstream OutFile;
  string buffer;
  string Filename;
  string OutputFile_Reference;
  string OutputFileList;
  vector <Result> ReferenceResults;
  vector < vector <Result> > AllmyResult;
  vector <string> Filenames;
  vector <string> OutputFiles;

  /***********************/
  /* Retrieve parameters */
  /***********************/
  if(args != 3)
  {
    printf("Usage: %s [List containing names of output files from Matt's version] [Output file from original version]\n", argv[0]);
    cout << "Now terminating program..." << endl;
    return -1;
  }
  OutputFileList = string(argv[1]);
  OutputFile_Reference = string(argv[2]);

  /****************************************/
  /* Retrieve test data from output files */
  /****************************************/

  /***********************************/
  /* Open and read-in OutputFileList */
  /***********************************/
  if(Utility::FileExists(OutputFileList))
    InFile.open(OutputFileList.c_str());
  else
  {
    printf("Error in function main: File %s does not exist! Now terminating simulation ...\n", OutputFileList.c_str());
    exit(EXIT_FAILURE);
  }
 
  while(getline(InFile, buffer))
    OutputFiles.push_back(buffer);
  InFile.close();
  
  /************************/
  /* Begin data retrieval */
  /************************/
  for(int i=0; i<(int)OutputFiles.size(); i++)
  {
    Filenames.push_back(OutputFiles[i]);
    myData.RetrieveTestData(OutputFiles[i]);
    AllmyResult.push_back(myData.GetmyResult());
  }

  /*********************************************************/
  /* Retrieve data from original code and use as reference */
  /* Assume this data is the absolute truth                */
  /*********************************************************/
  myData.RetrieveReferenceData(OutputFile_Reference);
  ReferenceResults = myData.GetmyResult();

  /********************************************/
  /* Output results in a more readable format */
  /********************************************/
  
  /*************************/
  /* Open file to write to */
  /*************************/
  Filename = "AllResult.txt";
  OutFile.open(Filename.c_str());

  /****************************/
  /* Write some general notes */
  /* about table to assist    */
  /* reader                   */
  /****************************/
  OutFile << "The table below shows average execution time for different sections" << endl;
  OutFile << "of my (Matt's) version of the DBScan code (note that the averages" << endl;
  OutFile << "are calculated from 5 identical runs). The time averages have" << endl;
  OutFile << "been calculated for different combinations for two of the four" << endl;
  OutFile << "parameters now passed to the DBScan code (note that one of the" << endl;
  OutFile << "parameters is kept constant). I set the -Xmx option to 6GB to" << endl;
  OutFile << "allow for the use of a ton of memory on the heap." << endl;
  OutFile << "All timings below are in units of seconds and the glossary at" << endl;
  OutFile << "the end of the file explains what the different columns represent." << endl << endl;
 
  /******************************/
  /* Write test results to file */
  /******************************/
  for(int i=0; i<(int)Filenames.size(); i++)
  {
    vector <Result> tempResult = AllmyResult[i];
    OutFile << "Minimum Craters per Cluster: " << tempResult[0].minCraters << " - Map Grid Spacing: " << tempResult[0].mapSpacing << " units - Search Radius: " << tempResult[0].searchRadius << " units" << endl << endl;
    OutFile << "N\tRFT\tCTT\tCHMT\tDBST\tNClus\tTotT" << endl;
    
    for(int j=0; j<(int)tempResult.size(); j++)
    {
      OutFile << tempResult[j].nCraters << "\t" << tempResult[j].fileReadTime << "\t"
	      << tempResult[j].treeCreationTime << "\t" << tempResult[j].hashMapCreationTime << "\t"
	      << tempResult[j].dbscanTime << "\t" << tempResult[j].nClusters << "\t"
	      << tempResult[j].totalTime << endl;
    }
    OutFile << endl;
  }
  
  /***********************************/
  /* Write reference results to file */
  /***********************************/
  OutFile << "************************************************" << endl;
  OutFile << "* Reference Results Generated by Original Code *" << endl;
  OutFile << "************************************************" << endl << endl;
  OutFile << "Minimum Craters per Cluster: " << ReferenceResults[0].minCraters << " - Map Grid Spacing: " << ReferenceResults[0].mapSpacing << " units - Search Radius: " << ReferenceResults[0].searchRadius << " units" << endl << endl;
  OutFile << "N\tRFT\tCTT\tCHMT\tDBST\tNClus\tTotT" << endl;

  for(int i=0; i<(int)ReferenceResults.size(); i++)
  {
    OutFile << ReferenceResults[i].nCraters << "\t" << ReferenceResults[i].fileReadTime << "\t"
	    << ReferenceResults[i].treeCreationTime << "\t" << ReferenceResults[i].hashMapCreationTime << "\t"
	    << ReferenceResults[i].dbscanTime << "\t" << ReferenceResults[i].nClusters << "\t"
	    << ReferenceResults[i].totalTime << endl;
  }
  OutFile << endl;

  OutFile << "************" << endl;
  OutFile << "* Glossary *" << endl;
  OutFile << "************" << endl << endl; 
  OutFile << "N: Total number of craters" << endl;
  OutFile << "RFT: Time used to read in crater list file" << endl;
  OutFile << "CTT: Time used to create RTree" << endl;
  OutFile << "CHMT: Time used to create Hash Map" << endl;
  OutFile << "DBST: Time used to run DBScan section of code" << endl;
  OutFile << "NClus: Total number of clusters found" << endl;
  OutFile << "TotT: Program elapsed time" << endl;

  OutFile.close();

  return 0;
}
